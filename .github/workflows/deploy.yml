name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행

permissions:
  id-token: write  # GitHub에서 OIDC 토큰 발급을 허용
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    #      SPRING_PROFILES_ACTIVE: ${{secrets.SPRING_PROFILES_ACTIVE}}
    #      SPRING_DATASOURCE_URL: ${{secrets.SPRING_DATASOURCE_URL}}
    #      SPRING_DATASOURCE_USERNAME: ${{secrets.SPRING_DATASOURCE_USERNAME}}
    #      SPRING_DATASOURCE_PASSWORD: ${{secrets.SPRING_DATASOURCE_PASSWORD}}
    #      SPRING_REDIS_HOST: ${{secrets.SPRING_REDIS_HOST}}
    #      SPRING_REDIS_PORT: ${{secrets.SPRING_REDIS_PORT}}
    #      SPRING_REDIS_PASSWORD: ${{secrets.SPRING_REDIS_PASSWORD}}
    #      GOOGLE_CLIENT_ID: ${{secrets.GOOGLE_CLIENT_ID}}
    #      GOOGLE_CLIENT_SECRET: ${{secrets.GOOGLE_CLIENT_SECRET}}
    #      KAKAO_CLIENT_ID: ${{secrets.KAKAO_CLIENT_ID}}
    #      COOLSMS_API_KEY: ${{secrets.COOLSMS_API_KEY}}
    #      COOLSMS_API_SECRET: ${{secrets.COOLSMS_API_SECRET}}
    #      COOLSMS_API_FROM: ${{secrets.COOLSMS_API_FROM}}
    #      OPENAI_API_URL: ${{secrets.OPENAI_API_URL}}
    #      OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
    #      APPLE_PRIVATE_KEY: ${{secrets.APPLE_PRIVATE_KEY}}
    #      FIREBASE_ADMIN_SDK: ${{secrets.FIREBASE_ADMIN_SDK}}


    steps:
      # 1. GitHub 저장소에서 코드 가져오기
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. OIDC를 사용하여 AWS 로그인 (IAM 역할 사용)
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Build the JAR file
      - name: Build JAR file
        run: ./gradlew clean build

      # 4. Docker 이미지 빌드 & Docker Hub에 푸시
      - name: Build and push Docker image
        run: |
          docker build -t hjkim4842/sobok:latest .
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          docker push hjkim4842/sobok:latest
          docker logout # 로그아웃

      # 5-1. 고유한 버전 라벨 생성 (중복 방지)
      - name: Generate unique version label
        run: echo "VERSION_LABEL=sobok-app-v$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      # 5-2. 애플리케이션 패키지 압축 및 업로드
      - name: Upload application package to S3
        run: |
          zip -r sobok-app-v${{ github.run_number }}.zip .
          aws s3 cp sobok-app-v${{ github.run_number }}.zip s3://elasticbeanstalk-ap-northeast-2-140023384172/

      # 5-3. S3 버킷에서 최신 10개 애플리케이션 유지
      - name: Clean up old application versions in S3
        run: |
          aws s3 ls s3://elasticbeanstalk-ap-northeast-2-140023384172/ | 
          grep sobok-app-v | sort -t'v' -k2 -nr | awk 'NR>10 {print $4}' | while read key; do
          aws s3 rm s3://elasticbeanstalk-ap-northeast-2-140023384172/$key
          done

      # 5-3. Elastic Beanstalk 애플리케이션 버전 생성
      - name: Create new Elastic Beanstalk application version
        run: |
          aws elasticbeanstalk create-application-version --application-name sobok-app \
          --version-label v${{ env.VERSION_LABEL }} \
          --source-bundle S3Bucket="elasticbeanstalk-ap-northeast-2-140023384172",S3Key="sobok-app-v${{ github.run_number }}.zip"

      # 6-1. BetterStack Monitoring 일시중지
      - name: Pause BetterStack Monitoring
        run: |
          curl --request PATCH \
          --url https://uptime.betterstack.com/api/v2/monitors/3351769 \
          --header "Authorization: Bearer ${{ secrets.BETTERSTACK_API_KEY }}" \
          --header 'Content-Type: application/json' \
          --data '{"paused": true}'

      # 6-2. Elastic Beanstalk 환경에 배포 (멀티 컨테이너 설정 제거)
      - name: Deploy to Elastic Beanstalk (Single Container)
        run: |
          aws elasticbeanstalk update-environment --application-name sobok-app \
          --environment-name sobok-app-env-t4g \
          --version-label v${{ env.VERSION_LABEL }}

      # 6-3. Elastic Beanstalk 환경이 Ready 상태가 될 때까지 대기
      - name: Wait for Elastic Beanstalk environment to be ready
        run: |
          for i in {1..60}; do
            STATUS=$(aws elasticbeanstalk describe-environments --application-name sobok-app --environment-names sobok-app-env-t4g --query "Environments[0].Status" --output text)
            HEALTH=$(aws elasticbeanstalk describe-environments --application-name sobok-app --environment-names sobok-app-env-t4g --query "Environments[0].Health" --output text)
            echo "Current status: $STATUS, health: $HEALTH"
            if [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Green" ]; then
              echo "Environment is ready and healthy!"
              break
            fi
            sleep 10
          done

      # 6-4. BetterStack Monitoring 재개
      - name: Resume BetterStack Monitoring
        run: |
          curl --request PATCH \
          --url https://uptime.betterstack.com/api/v2/monitors/3351769 \
          --header "Authorization: Bearer ${{ secrets.BETTERSTACK_API_KEY }}" \
          --header 'Content-Type: application/json' \
          --data '{"paused": false}'