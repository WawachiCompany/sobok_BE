plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id "io.sentry.jvm.gradle" version "5.7.0"
}

sentry {
    includeSourceContext = true

    org = "chihuahua"
    projectName = "java-spring-boot"
    authToken = System.getenv("SENTRY_AUTH_TOKEN")
}

println ">> SENTRY_AUTH_TOKEN: ${System.getenv("SENTRY_AUTH_TOKEN") != null ? 'SET' : 'NOT SET'}"

dependencyManagement {
    imports {
        mavenBom "io.opentelemetry:opentelemetry-bom:1.50.0"
        mavenBom "io.opentelemetry:opentelemetry-bom-alpha:1.50.0-alpha" // alpha BOM 추가

    }
}

group = 'com.apple'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf:thymeleaf-spring6:3.1.1.RELEASE'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-gson:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'net.nurigo:sdk:4.3.2'
    implementation "io.netty:netty-resolver-dns-native-macos:4.1.96.Final:osx-aarch_64"
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'

    implementation 'com.google.firebase:firebase-admin:9.4.3'
    implementation 'com.nimbusds:nimbus-jose-jwt:10.0.1'

    implementation("io.opentelemetry:opentelemetry-api")
    implementation("io.opentelemetry:opentelemetry-sdk")
    implementation("io.opentelemetry:opentelemetry-exporter-otlp")
    implementation("io.opentelemetry:opentelemetry-api-incubator")
    implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter:2.16.0")
}

test {
    useJUnitPlatform()

    // 테스트 로깅 설정
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true

        // 각 테스트의 정보 출력
        info {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            displayGranularity 2
        }
    }
    jvmArgs = ['-XX:+EnableDynamicAgentLoading']
    // 테스트가 실패해도 모든 테스트 실행
    ignoreFailures = true
}


tasks.getByName("jar").enabled = false

