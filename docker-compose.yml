services:
  nginx:
    build:
      context: ./nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - spring-boot-app
    networks:
      - app-network
    volumes:
      - ./nginx/default-http.conf:/etc/nginx/conf.d/default-http.conf:ro
      - ./nginx/default-https.conf.disabled:/etc/nginx/conf.d/default-https.conf.disabled:ro
      - /etc/letsencrypt:/etc/letsencrypt  # 인증서 공유
      - ./certbot/www:/var/www/certbot  # certbot 웹 인증 디렉토리 공유
    entrypoint: [ "/bin/sh", "-c", "/etc/nginx/entrypoint.sh" ]
    restart: always

  # certbot 컨테이너 추가
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt  # 인증서 저장
      - ./certbot/www:/var/www/certbot  # 웹 인증용 디렉토리
    entrypoint: [ "/bin/sh", "-c" ]
    command: >
      "if [ ! -f /etc/letsencrypt/live/sobok-app.com/fullchain.pem ]; then
         certbot certonly --webroot --webroot-path /var/www/certbot --email hjkim4842@gmail.com --agree-tos --no-eff-email --rsa-key-size 4096 --force-renewal -d sobok-app.com -d www.sobok-app.com;
       else
         echo 'Certificate already exists. Skipping certbot.';
       fi"
    networks:
      - app-network
  spring-boot-app:
    build:
      context: .
      args:
        SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    container_name: spring-boot-app
    expose:
      - "8080"
    networks:
      - app-network
    volumes:
      - /opt/secrets:/opt/secrets:ro
    env_file:
      - /opt/secrets/.env
    environment:
      DOCKER_ENV: "true"
  newrelic-infra:
    image: newrelic-infra
    container_name: newrelic-infra
    build:
      context: .
      dockerfile_inline: |
        FROM newrelic/infrastructure:latest
        ADD newrelic-infra.yml /etc/newrelic-infra.yml
    networks:
      - app-network
    env_file:
      - /opt/secrets/.env
    cap_add:
      - SYS_PTRACE
    privileged: true
    pid: host
    volumes:
      - /opt/secrets:/opt/secrets:ro
      - /:/host:ro
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
