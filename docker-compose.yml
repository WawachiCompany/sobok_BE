services:
  nginx:
    build:
        context: ./nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - spring-boot-app
    networks:
      - app-network
    volumes:
      - ./nginx/custom-nginx.conf:/etc/nginx/conf.d/default.conf:ro  # 커스텀 설정 파일
      - ./nginx/html:/usr/share/nginx/html
      - ./nginx/conf:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot // certbot 폴더 추가
    entrypoint: ["/bin/sh", "-c", "/etc/nginx/entrypoint.sh"]
    restart: always

  # certbot 컨테이너 추가
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot --post-hook \"nginx -s reload\"; sleep 12h & wait $${!}; done'"
    networks:
      - app-network
      -
  spring-boot-app:
    build:
        context: .
        args:
          SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    container_name: spring-boot-app
    expose:
      - "8080"
    networks:
      - app-network
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_REDIS_HOST: ${SPRING_REDIS_HOST}
      SPRING_REDIS_PORT: ${SPRING_REDIS_PORT}
      SPRING_REDIS_PASSWORD: ${SPRING_REDIS_PASSWORD}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      KAKAO_CLIENT_ID: ${KAKAO_CLIENT_ID}
      COOLSMS_API_KEY: ${COOLSMS_API_KEY}
      COOLSMS_API_SECRET: ${COOLSMS_API_SECRET}
      COOLSMS_API_FROM: ${COOLSMS_API_FROM}
      DOCKER_ENV: "true"
networks:
    app-network:
        driver: bridge